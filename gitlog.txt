2021-02-25->0.129
- minor fixes.
2021-02-24->0.128
- small fixes
2021-02-24->0.127
- new design: leave crowns un-resolved, first do satnode.next_>next,... untill 
  the satnodehas 0 vk, of nov==3. Then use the sat resulting from here(it may
  have :2 in it), as satfilter to resolve this satnode's crowns. The result of 
  that, will be used as satfilter for .parent satnode.
- TBD: code/test
2021-02-18->0.126
- new: basics/vkdic_sat_test, /vkdic_remove
-satnode: when psat returns a dict{1:{}, 2:[]}
2021-02-18->0.125
- test with cfg12-55.json, it has 9 sats(solver4 used 0.053735971450805664):
   [915, 2362, 2325, 2320, 2321, 2322, 2323, 785, 787]
   a.(915):   001110010011
   b.(2362):  100100111010
   c.(2325):  100100010101
   d.(2320):  100100010000
   e.(2321):  100100010001
   f.(2322):  100100010010
   g.(2323):  100100010011
   h.(785):   001100010001
   i.(787):   001100010011
ray@thinkpad-x1:~/lab/solver9$ python solver9.py cfg12-55.json
there are 9 sats:
1: { 11: 0, 10: 0, 9: 1, 8: 1, 7: 0, 6: 0, 5: 0, 4: 1, 3: 0, 2: 0, 1: 0, 0: 1 }, verified: True
2: { 11: 1, 10: 0, 9: 0, 8: 1, 7: 0, 6: 0, 5: 0, 4: 1, 3: 0, 2: 0, 1: 0, 0: 0 }, verified: True
3: { 11: 1, 10: 0, 9: 0, 8: 1, 7: 0, 6: 0, 5: 0, 4: 1, 3: 0, 2: 0, 1: 0, 0: 1 }, verified: True
4: { 11: 1, 10: 0, 9: 0, 8: 1, 7: 0, 6: 0, 5: 0, 4: 1, 3: 0, 2: 1, 1: 0, 0: 1 }, verified: True
5: { 11: 0, 10: 0, 9: 1, 8: 1, 7: 0, 6: 0, 5: 0, 4: 1, 3: 0, 2: 0, 1: 1, 0: 1 }, verified: True
6: { 11: 0, 10: 0, 9: 1, 8: 1, 7: 1, 6: 0, 5: 0, 4: 1, 3: 0, 2: 0, 1: 1, 0: 1 }, verified: True
7: { 11: 1, 10: 0, 9: 0, 8: 1, 7: 0, 6: 0, 5: 0, 4: 1, 3: 0, 2: 0, 1: 1, 0: 0 }, verified: True
8: { 11: 1, 10: 0, 9: 0, 8: 1, 7: 0, 6: 0, 5: 0, 4: 1, 3: 0, 2: 0, 1: 1, 0: 1 }, verified: True
9: { 11: 1, 10: 0, 9: 0, 8: 1, 7: 0, 6: 0, 5: 1, 4: 1, 3: 1, 2: 0, 1: 1, 0: 0 }, verified: True
Time used: 0.008216619491577148
1->h, 2->d, 3->e, 4->c, 5->i, 6->a, 7->f, 8->g, 9->b. 
All right.
- testing cfg60-266.json, run into issue with Exception: 
  TBD: there are 32 entries with :2, 
  in basics.py:75. Need to design a way to handle this.
  solver4.py found 8 sats using 26.8 secs.

2021-02-17->0.124
- minor fix in crown.py/satnode.py so config1.json with nov==8 comes thru.
2021-02-15->0.123
- now all 7 sats from cfg12-45.json are found right, with built in verification
- FINAL['limit'] set to be 10
- basics/verify_sat for verifying sat in solver9
- intro of satnode.tail_varray: verify tail-satnode, where it is used for
  sh-shifting vk.bits so that they can be compared with satfilter 
- satnode.verify_tail_sat
- refactore solver9
- TBD: when there are more than 3 sat entries with :2 - should I do recursion
  with satnode(nov - 3)? This issue will apear when the number of variables is
  high: now I am testing with cfg12-45, with 12 vars. 
  I will be analyzing and redesigning when doing bigger var-numbers, later.
2021-02-15->0.122
- polishing and completion in basics, satnode, solver9.
  cfg12-45.json: 
ray@thinkpad-x1:~/lab/solver9$ python solver9.py
there are 7 sats:
1: { 11: 1, 10: 0, 9: 1, 8: 1, 7: 0, 6: 0, 5: 1, 4: 1, 3: 0, 2: 0, 1: 0, 0: 1 }
2: { 11: 1, 10: 0, 9: 1, 8: 1, 7: 0, 6: 0, 5: 1, 4: 1, 3: 1, 2: 0, 1: 0, 0: 1 }
3: { 11: 1, 10: 0, 9: 1, 8: 1, 7: 0, 6: 1, 5: 1, 4: 1, 3: 0, 2: 0, 1: 0, 0: 1 }
4: { 11: 1, 10: 0, 9: 1, 8: 1, 7: 0, 6: 1, 5: 1, 4: 1, 3: 1, 2: 0, 1: 0, 0: 1 }
5: { 11: 1, 10: 0, 9: 1, 8: 1, 7: 0, 6: 0, 5: 1, 4: 1, 3: 0, 2: 1, 1: 0, 0: 0 }
6: { 11: 1, 10: 0, 9: 1, 8: 1, 7: 0, 6: 0, 5: 1, 4: 1, 3: 0, 2: 1, 1: 0, 0: 1 }
7: { 11: 0, 10: 1, 9: 1, 8: 1, 7: 1, 6: 1, 5: 1, 4: 1, 3: 0, 2: 0, 1: 0, 0: 1 }
  Time used: 0.008653402328491211
7:b 

2021-02-15->0.121
- basics/split_satfilter: if sdic has x:2 in it, 1 or n times, split sdic into
  1 or n: exhaust all (n<4) 2 ** n combinations. return a list of sdics.
- get rid of basics/merge_sats and merge_satdics
- satnode.verify_sat: when satfilter has no :2 in it, verify it with vk3 in .vkm
- satnode handles multi-sats collection in FINAL.
- vklause.hit now accept sdic as input.
2021-02-13->0.120
- see log.txt entry : 2021-02-13: analysis on a new satnode design, where
  it can handle psats with diff number of ':2'.
2021-02-12->0.119
- extend basics/deb_01 to cover 12.6.1 and 12.6.2
- TxEngine.trans_varray has again the 
  assert(self.start_vklause.nov == len(varray)) this check is right to be there.
- satnode.crown-mananger.sh and satnode.next(satnode).sh should be 2 insights
  now use sh.clone to make sure of that.
- TBD: from the 7 solutions(a,b,c,d,e,f,g), 
  12.4.2 should cover d, but it didn't 
  12.4.3 should cover e, but it didn't 
  12.4.5 should cover f, but it didn't 
  12.4.6 should cover g, but it didn't 
  12.6.1 should cover a and b, but it didn't.
  12.6.2 should cover c, but it didn't. 
2021-02-12->0.118
- move crownmanager/_oppo to basic/oppo_binary
- TxEngine constructor: use vk.nov, in stead of extra nov as input param.
- remove TransKlauseEngine.py/trans_varray/assert(self.nov == len(varray))
  not sure why this has cause issue.
- made sure crown-mamager/add_crown: when creating a new crown, use 
  self.sh.clone, not self.sh to feed Crown instance.
2021-02-11->0.117
- fix in crown
2021-02-10->0.116
- fix in crownmanager/._vk2_sdic
2021-02-10->0.115
- fix in crown, new debug function in basics; optimize in 
  crownmanager/._vk2_sdic
2021-02-10->0.114
- fix in crown: when vk12m is a list, make the right csats: [psats,[]]
- refactor basics/filter_sdic, node12, satnode
- fix in crownmanager/_vk2_sdic
2021-02-09->0.113
- optimized vk12mgr a bit.
2021-02-08->0.112
- progress on node12/nov3_sats -> nov321_sats; satnode.py and solver9
2021-02-08->0.111
- refactored crown.csats: a list of csats - each path from crown to leave node12
  there will be a sat-path resulting to one or multiple sat(s).
  each csat is a list of 2 elements:
    [<sdic along the path, without last node12's sats>, [last sats]]
  the last node12 may have multiple sats. So this csat may have multiple sats:
  [0].update([1][i]). When delivering a csat, crown will maintain a .sub_curosr
  only when it overflows (bigger than len(last sats)), will csat_cursor increase
  and, when all csats of a crown are exhausted, will crownmananger.crown_index
  gets increased. When all crowns are exhausted, crownmanager.state set to 1
  This is a prep for collecting all possible sats.
- basic/FINAL is the final sats collector, it can also limit how many sats 
  should be collected,
- TBD: finish the multiple-sat collection, and testings.
2021-02-06->0.110
- progress on crown and node12.
2021-02-06->0.109
- crown and node12 have satpath - a list of sdics, from crown all the way 
  to this node12. The leave-node12 will add an array of sdics. 
  The leave-node12 will be in crown csats list. When crown delivers its 
  solution sat, it will loop thru all ele in its csats: each has array of
  sdics, each of which will combine with the whole satpath to form a complete
  sat-dic.
2021-02-05->0.108
- refactoring on basics, crown, crownmanager, node12, satholder, satnoce.
- TBD: figure out a way to collect sats: bottom(leave node12) up ...
2021-02-03->0.107
- successfully found 1 sat(f) with 0.018secs. solver4 found all 7 for 0.046 secs
- TBD: find all sats.
2021-02-03->0.106
- fix in crownmanager/_vk2_sdic(vk)
2021-02-03->0.105
- fix in node12: when chdic[<val>] == None, set node12 with sh.full_sats
2021-02-03->0.104
- crown-mananger.next_psat no more set solution_cursor = 0. Done in .init()
- satnode adds ._clone_chdic, making crown_dic a clone of self.raw_crown_dic
- tx_vkm now attached to self(satnode instance)
2021-02-02->0.103
- fix a bug in satnode.
- TDB: 1. crownmgr.next_psat always reset solution_cursor; 2 satnode has issue.
2021-02-01->0.102
- using satfilter in crown.solve
- TBD: more testing
2021-02-01->0.101
- refactored node12 and crown.
- TBD: satfilter needs to put into crnmgr.next_psat.
2021-01-30->0.100
- progress.
2021-01-29->0.99
- crown.initial_nodes: when no vk exists (len(vkdic)==0), vkm.terminated = True
  and in vkm.morph, if terminated==True and no vk, chdic[val] = None.
  This chdic[val]==None will set crown.child_satdic[val] = sh.full_sats()
- child_satdic will be keyed by val, no more by node.vname. So is the case also
  in node12.child_satdic.
- TBD: testing
2021-01-29->0.98
- minor optimization in crownmanager: init no more called in constructor.
2021-01-29->0.97
- CrownManager: separates a method .init(), for reset crowns list 
  This should be called every time satnode.spawn is called. Because it has a 
  different satfilterfilter every time it is called. This satfilter comes from 
  one of the node12's that are made by different satnode.parent children.
- satnode.spawn now has the call self.crnmgr.init() in it.
2021-01-28->0.96
- cfg12-45.json has 7 sats:
  [2017, 2033, 3953, 2865, 2873, 2929, 2937]: [a,b,c,d,e,f,g]
2017:011111100001 {11:0, 10:1, 9:1, 8:1, 7:1, 6:1, 5:1, 4:0, 3:0, 2:0, 1:0, 0:1}
2033:011111110001 {11:0, 10:1, 9:1, 8:1, 7:1, 6:1, 5:1, 4:1, 3:0, 2:0, 1:0, 0:1}
3953:111101110001 {11:1, 10:1, 9:1, 8:1, 7:0, 6:1, 5:1, 4:1, 3:0, 2:0, 1:0, 0:1}
2865:101100110001 {11:1, 10:0, 9:1, 8:1, 7:0, 6:0, 5:1, 4:1, 3:0, 2:0, 1:0, 0:1}
2873:101100111001 {11:1, 10:0, 9:1, 8:1, 7:0, 6:0, 5:1, 4:1, 3:1, 2:0, 1:0, 0:1}
2929:101101110001 {11:1, 10:0, 9:1, 8:1, 7:0, 6:1, 5:1, 4:1, 3:0, 2:0, 1:0, 0:1}
2937:101101111001 {11:1, 10:0, 9:1, 8:1, 7:0, 6:1, 5:1, 4:1, 3:1, 2:0, 1:0, 0:1}

- cfg60-266.json has 8 sats: 
  solver4 uses 20+secs, solver8 uses 3 secs for 1 sat (a)
  solver8 uses 3+ secs finding one sat 
 1034639552019849453, 1034639552086958317, 1034639552556720365,
 1034639552623829229, 1043646751274590445, 1043646751341699309,
 1043646751811461357, 1043646751878570221]:
 0: 1110010110 1111000111 0011000011 0110001011 0110011000 0011101101
 1: 1110010110 1111000111 0011000011 0111001011 0110011000 0011101101
 2: 1110010110 1111000111 0011000011 1110001011 0110011000 0011101101
 3: 1110010110 1111000111 0011000011 1111001011 0110011000 0011101101
 4: 1110011110 1111000111 0011000011 0110001011 0110011000 0011101101
 5: 1110011110 1111000111 0011000011 0111001011 0110011000 0011101101
 6: 1110011110 1111000111 0011000011 1110001011 0110011000 0011101101
 7: 1110011110 1111000111 0011000011 1111001011 0110011000 0011101101

2021-01-28->0.95
- start testing with cfg12-45.json
- optimization in node12, and crownmanager(iterative replace recursion)
- fix in crown/resolve
2021-01-27->0.94
- success with config1.json
2021-01-26->0.93
- basics/sdic_fail(d0, d1) also set d1's value from 2 to 0|1 if d0 requires that
- TBD: how to get the final sats, with crown/psats. Need more analysis.
2021-01-26->0.92
- progress: basics/sdic_fail: used in satnode/filter_children, and 
  crownmanager.add_crown now also uses satfilter to not add crown if csats fails
  to be checked against satfilter. This reduces search space.
2021-01-25->0.91
- progress: don't create self.next ( an inst of SatNode) in constructor. But
  when needed.
2021-01-25->0.90
- re-designed/impl. of satnote, interaction between it and crownmanager/crown.
- test not yet done.
2021-01-24->0.89
- satnode.filter_children - how to loop  TBD
2021-01-23->0.88
- progress on cown, crownmanager and satnode.
2021-01-23->0.87
- fixes in crownmanager._vk1_sdic/._vk2_sdic, and in crown.
2021-01-22->0.86
- re-code vk12m.morph. bvk_cvs no more needed.
2021-01-22->0.85
- impl vk12m.morph the same way as in vkm.morph. TBD: test
2021-01-21->0.84
- refactored vkmgr/morph, and vk12m: now use vkdic, and kn1s/kn2s
- TBD: vk12m.morph
2021-01-20->0.83
- simplify what last checked in.
2021-01-20->0.82
- recode vkmgr.morph, and crownmanager/satnode.
2021-01-20->0.81
- optimized vkmgr.bestchoice: take away all tsvk kns from candidates - Because
  a kn can not be in >1 best-keys. This reduce the loop-count.
2021-01-19->0.80
- possible bug in vkmgr.py/morph: I should loop thru all 2**3 == 8 vals?
  TBD: analysis
- coding in crown and crownmanager for covering when only 1 vk left.
2021-01-18->0.79
- fix in satnode cdic[1] > cdic.get(1,{}), cdic[2] > cdic.get(2, {})
- progress on handling the case of cown top-level node with only 1 vk
2021-01-18->0.78
- refactored/fixed/optimized satnode and vkmananger. Still backwards compatible.
2021-01-17->0.77
- change crown.csats to be list of tuple: (sat-dic, leef-node12-name). Because
  a crown may have multiple sat-dics.
2021-01-17->0.76
- tested with config1.json: crown/node12 start working, and deliver psats with 
  {7:1, 6:2, 5:1, 4:0, 3:1, 2:0, 1:1, 0:0}, where 6:2 means a wild-card for v6.
2021-01-15->0.75
- move merge_sats from node12 to basics.
- progress on managing sats-branching, from crown to bottom-level node12.
  Need more testing
2021-01-14->0.74
- fixing crown, vk12m.
2021-01-13->0.73
- progressing.
2021-01-12->0.72
- new design / impl.: crown/crown-manager, interactions with satnode. 
  Not yet finished.
2021-01-11->0.71
- sat2 partial sats management in node12
- TBD: interaction between node12 and satnode.
2021-01-11->0.70
- progress on vk12mgr and node12, on collecting sats. Some refactoring on both.
2021-01-10->0.69
- fixes in vk12mgr and node12.
2021-01-08->0.68
- tested vk2 as bvk (multiple), and if bvk_cvs counts 4 (2**2 ==4)
  then no space left -> self.terminated = True
- vk12m.bvk_cvs is a set, no more list.
2021-01-08->0.67
- tested vk12m.best_vk2, with manually deleted vk1dic in config1,json
  setting.
- refactored some.
2021-01-08->0.66
- code for vk12m: in case no vk1 exists, pick the best vk2. Always set a list
  self.bvk_cvs, either from vk1 bvk or vk2 bvk. Now in morph, test if a value
  is in self.bvk_cvs, for exclusion.
- refactored 
2021-01-07->0.65
- enhanced satholder with get_psats dic for tracing {var>:<val>,..}
- refactored/optimized basics/node12/satnode
- TBD: issue: vk12m - if no vk1, when picking bvk, there can be multiple
  vk2 sitting on the same 2 bits, in that case exccl-cvs?
  And, how pick the best vk2?
2021-01-06->0.64
- minor fix. The approach introed by 0.63 works!
2021-01-06->0.63
- believe found the bug/fixed: when doing vk12m.clone(), bvk not set.
  this causes isse when calling topbits_coverages(vkm.bvk, topbits)
  Solution: vk12m.txed_clone or vk12m.clone both will NOT set bvk.
  But vk12m now has a method .bvk_topvalue. Node12.spaw(): before doing
  tx, get cv = self.vk12m.bvk_topvalue() and use this cv in vk12m.morph
  This also optimized away topbits_coverages in node12 and vk12m.
- TBD: test it
2021-01-06->0.62
- optimized a bit for VK12Manager constructor: choices for call/not-call
  of make_bdic and normalize.
- still need to find/fix the bug in 0.61
2021-01-05->0.61
- effort to pick default vk1 as bvk with the 1 bit sit on highst pos.
  This can  optimize. But this has brought in a bug. Need to find it.
  TBD.
2021-01-05->0.60
- give node12 inst a name. children is a list now (was dict)
- pick highst bit vk1 as default bvk in vk12m
- tried node12.spawn (9-7/8-1/7-1/6-1/5-1/4-1/3-1) to the end: 
  sofar so good
2021-01-04->0.59
- refactored/fixed vk12mgr, and node12
- made satnode's loop thru children with sorted val-keys. When loop with
  for k, v in dict.items(), it is really not deterministic about the calling
  sequence. I need that in debugging.
- tested cfg12-45's children(1,2,3,4,5,6,7)'s spawn. With the reduction in
  child-5's C0016/C0045 removed by nov==8/vk1:C0044
  child-6's C0013/C0002 removed by nov==8/vk1: C0014/C0009
  So far node12 works fine with vk12mgr.
  TBD: node12.spawn all the way till one child finds sats?
2021-01-04->0.58
- progress on vk12m / node12
2021-01-04->0.57
- coded vk12mgr/morph, node12/spawn
2021-01-03->0.56
- progress on vk12mgr.py and node12.py
2021-01-03->0.55
- Node12 will take care of vk12dic, for every satnode's child.
- new class VK12Manager / vk12m.py
2021-01-02->0.54
- When making crowns in vkm.morph, now consider bvk cover value (blokc it)
- progress in crown.py
2020-12-31->0.53a
- cfg12-45.json has 7 sats: 
  [2355, 2363, 2419, 2427, 3299, 3315, 3443]. in 9-12 space (max 512):
  [2355, 2363, 2419, 2427] are in 4-th subspace: [307, 315, 371, 379]
  [3299, 3315, 3443] are in 6-th subspace: [227, 243, 371]

- analized cfg12-45 split behavior. After txed on C0006{10:0,8:0,1:0} and 
  C0017 {10:1,8:1,1:1}->[11,10,9], there are 12 vk3 left untouched,31 touched.
  cfg9-12.json (for 12 left in vkdic): 
  123 x sats: [ # in the 512 value-search-space #
    0  1  2  3  4  6  8  9  10 11 20 32 33 34 35 36 38 40 41 42 
    43 48 49 50 51 52 56 57 58 59 64 65 66 67 68 70 72 73 74 75 76 78 84 
    96 97 98  99  100 102 104 105 106 107 108 110 112 113 114 115 116 120 
    121 122 123 124 129 131 136 137 161 163 168 169 177 179 184 185 193 
    195 200 201 204 225 227 232 233 236 241 243 248 249 252 304 305 
    306 307 308 309 312 313 314 315 340 368 369 370 371 372 376 377 
    378 379 380 433 435 437 440 441 497 499 504 505 508 
  ]
  from the 8 children, 0 and 7 are covered by base C0006 and C0017.
  all 8 children:
  0: cfg12-45-0-9-17.json (17=vk1s + vk2s): no sat
     cfg12-45-0-9-29-vk123.json (29: all vks): no sats 

  1: cfg12-45-1-9-18.json (18=vk1s + vk2s): no sat
     cfg12-45-1-9-30-vk123.json (30: all vks): no sats 

  2: cfg12-45-2-9-13.json (13=vk1s + vk2s): 1 sat: [270] not in cfg9-12's sats
     cfg12-45-2-9-25-vk123.json (25: all vks): no sat

  3: cfg12-45-3-9-13.json (13=vk1s + vk2s): no sat
     cfg12-45-3-9-25-vk123.json (25: all vks): no sats 

  4: cfg12-45-4-9-13.json (13=vk1s + vk2s): 9 sats:
        [283,307,310,311,315,347,371,375,379]:[307,315,371,379] in 9-12 sats
     cfg12-45-4-9-25-vk123.json (25: all vks): [307,315,371,379]

  5: cfg12-45-5-9-14.json (14=vk1s + vk2s): 2 sats:[261,277] all not in 123 sats
     cfg12-45-5-9-26-vk123.json (26: all vks): no sats 

  6: cfg12-45-6-9-10.json (10=vk1s + vk2s): 8 sat:
       [227,231,243,247,355,359,371,375], [227, 243, 371] in 123 sats
     cfg12-45-6-9-22-vk123.json (22: all vks): 3 sats:[277, 243, 371]

  7: cfg12-45-7-9-17.json (17=vk1s + vk2s): 2 sats: [227, 243] both in 123 sats
     cfg12-45-7-9-20.json (29: all vks): 2 sats: [227, 243]
  
2020-12-31->0.52
- crown now has vk1dic/vk2dic, saved under child-dic[val]. The sum vk12dic is 
  saved on parent/self .vk12dic
- looking into cfg12-45 case, for design analysis: txed with C0006/C0017 as base
  all sollution *.tx files saved under docs
2020-12-30->0.51
- vkmgr.py: new class VKManager.
- satnode.py: new class satnode
- get rid of bitdic, branch, relationmanager and workbudder
2020-12-28->0.50
- debug rm
- realized, that untouched should be seperated from touched:
  touched is child-specific, but untouched should be shared among all
  children: solve the next level with untouched(without touched). the solution
  can be combined with every child of the parent-br.
- although the br is based on first 3-bits (bestkey), but the other 3-bits
  keys, are they needed?
2020-12-27->0.49
- coding rm.
2020-12-26->0.48
- progress
2020-12-25->0.47
- new class RelationManager.
2020-12-25->0.46
- brached from solver8 -> solver9
  Plan to try out enhancing bitdic: relations-manager
  inside bitdic, or outside? Holding vks-dic, vk2-dic and vk1-dic?
2020-12-25->0.45
- minor polish, before branching off to solver9
2020-12-24->0.45
- found bugs: 1. Tx: wrong generated odd number of txs? fixed: using set ops
- vklause.clone(drops) can return empty vk.dic, in that case, not adding to vkd.
- cfg100-450 now uses 113 secs. Much better now, but still room to optimise.
2020-12-23->0.44
- branch/spawn untouchset vks will not be txed: no need to clone for every
  child bitdic. Share them will save some run.
2020-12-22->0.43
- Tx: txs no more a list of tuples, but dict. get rid of trans_value 
  reverse_value stuff.
- use class variable Branch.LAYERS for holde the tree
- cfg100-450.json failed to have result - debugging
2020-12-22->0.42
- get rid of visualizr.py, TransKlauseEngine.test_me, vklause.value_overshadow 
  vklause.set_completion,.position_value, move set_value_and_mask from __init__
  tp vklause.hit.
- in BitDic, move add_vk to be a method - no more inside of add_klause
  All these reduced run ti
  m for cfg100-450.json from 168 secs to 164
  cProfile time from 260 to 231 secs (see docs/2020-12-21-042=100-450.info)
- Branch/spawn: check for outdics length==1 and have opposite 0/1: 
  this branch-child is not to exist
- BitDic get_choice now returns changed...
2020-12-21->0.41
- get rid of nbits in vklause. This reduced cProfile run time for 
  cfg100-450.json from 542secs to 277 sec.
  see (see docs/2020-12-21-041=100-450.info)
2020-12-21->0.40
- cfg100-450 with solver4 was 438(533 secs cProfile) secs returning all sats. 
  Now solver8 return only 1, but use 488(542secs cProfile) secs
  (see docs/2020-12-21-040=100-450.info)
  I am disappointed. But using python -m cProfile gave me some insights, for
  optimization.
2020-12-21->0.39
- verification not run on normal process. *.sat file now have more info.
  python solver8.py *.sat will verify the sat in sat file
2020-12-20->0.38
- choice returned by BitDic.get_choice now has 3 in the tuple:
  kn, tsvk, tcvk, so that the kn will not be popped from tsvk
- branch.nov3 now uses set ops to simpify. It works.
2020-12-20->0.37
- refactored bitdic having new get_choice and best_choice. remove transfer
- get rid of makechoice.py
- moving topbits_coverages to basics, get rid of drop_bits
2020-12-19->0.36
- best choice will be made among the shortest vks. At beginning it is 3-bits,
  but down the tree 1,2 are preferred.
- before making choice among vk1s, check if they cover totality
  totality means: among the 1 bit vk, there exist two sitting on the same bit,
  with opposite values(0 and 1)
- if branch has totality, of spawned no children, it is renamed 'finished',
  and it is removed from parent's children-dic
2020-12-19->0.35
- based on solver7/0.34
2020-12-18->0.34
- Sat.nov class var holding nov. In Sat.verify looping thru vks, make
  sure vk.bits[0] < Sat.nove - safty guard.
2020-12-18->0.33
- VKlause.hit now can test if vk is hit by a sat( lst of tuples)
- python solver7.py *.sat will verify *.sat file
2020-12-18->0.32
- new class Sat for verifying and saving into .sat file
- VKlause.hit test now also accept v as a list of pairs: (<bit>,<bool-value>)
- WorkBuffer.build_sats: use the end-node, trace all the way back to root
  and collecting segment-sats to build a complete sat-array.
- it works on config1.json, verified, and outputted in verify/config1.sat
2020-12-17->0.31
- put satholder in use, workbuffer/build_sats make the final sats
  still bug: in [(3, 1), (5, 1), (6, 1), (0, 1), (7, 1), (1, 0), (2, 0), (4, 0)]
  last 2 bits should be (0,0),(1,1), not (0,1),(1,0)!
  But still big progress.
- TBD: make solver7/verify_sats
2020-12-16->0.30
- introducing SatHolder mechanism. Done incomplete impls: TBD
2020-12-15->0.29
- if nov becomes 3, check for sats
- in makechoice/best_vk1: handle when no g1-vk exists.
- on level-0 branch, parent is original bitdic. lower brs will
  have branch as parent.
2020-12-15->0.28
- move basic stuff into basics, make_vkdic to bitdic
- add branch/nov3() for testing nov==3 coverage,... TBD
2020-12-14->0.27
- run till" r->(r1, r5, r7) ->{r11, r51} ->{r110 } ->{r1101}
  r1101: nov==2: C032:{0:0}, C004: {1:0}
  @ branch.py:65/chdic = self.prepare() having issue @makechoice.py:243
  max argument empty. I am near to my near goal!
2020-12-14->0.26
- vklause now has a method: .value_overshadow(vkx), testing if, in case 
  self.dic has the same number of, or less bits than vkx, if the value-range 
  of vkx is already covered by self. this is useful when testing vk1 or
  later vk2
2020-12-14->0.25
- bug fixes.
- TBD: r7 has issue. It should resolve.
2020-12-13->0.24
- refactored wb, bitdic, branch
2020-12-12->0.23
- debugging workbuffer
2020-12-11->0.22
- design the structure of method on high level
2020-12-10->0.21
- move drop as BitDic method to outside of BitDic: drop_bits
2020-12-10->0.20
- solve_vk1 in progress
2020-12-10->0.19
- choice-dic did not break 3-bit processing, and getting to vk1.
2020-12-09->0.18
- progress: best_vk1/2/3 all return a choice-dic, in stead of a list
2020-12-09->0.17
- progress on 1. makechoice for vk1, branch/spawnoff1,..
2020-12-08->0.16
- branch/pickon_vk1, and more stabs in branch
2020-12-08->0.15
- first stage(nov==8 -> nov==5) done
- vklause adds topbits(), changed mask to value.
2020-12-07->0.14
- cnt/cvrs is now a dict keyed by cover-v, value: set of kns
- branch spawnoff:  hitdic for values hit, and children, for further search
- manually made b0-1.txt, b0-5.txt b0-7.txt for analysis of child-search
2020-12-06->0.13
b0 split to 1,5,7 success
makechoice/topbits_coverages modified, verified
2020-12-06->0.12
makechoice/topbits_coverages
2020-12-05->0.11
progress
2020-12-05->0.10
progressing
2020-12-04->0.9
progress
2020-12-04->0.8
choice now has 
 [(<base-vkname>,..), (<cover-values), g2dic, [g1-list], [g0-list]]
cretarium: it has the 1. most cover-values, 2. most g2s
2020-12-03->0.7
progress: branch.py used in solver7, using bitdic and TxEngine.
2020-12-03->0.6
TxEngine, BitDic
2020-12-02->0.5
make_choice done
2020-12-01->0.4
start working: makechoice
2020-11-30->0.3
progress
2020-11-30->0.2
makechoice.py - started, not yet finished how to pick the best 3-bits vklause
2020-11-28->0.1
New approach: solver7, based on Tx. But this time split into 8 R0..R7
in stead of 2.